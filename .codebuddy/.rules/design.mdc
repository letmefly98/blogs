---
description: 
globs:
alwaysApply: true
---
---
description: Command /design - 方案设计与可行性评估（合理性、修改/新增、需求外功能点、技术难点、接口与数据、测试与安全）
globs:
  alwaysApply: false
---

# 命令：/design（技术方案设计与可行性评估）

## 目标
- 基于已确认的 requirements.md，产出精炼而完整的 design.md。
- 评估需求在当前项目中的合理性，明确修改/新增点，识别需求外但工程必需的功能项。
- 给出接口与数据设计、技术难点与对策、测试策略与安全合规、风险与应急预案。

## 前置
- 必须：.specs/{spec_name}/requirements.md 已冻结（用户确认通过）。

## 角色定义
你将扮演产品经理、首席技术架构师以及非常熟悉该项目的核心开发工程师一起进行协作：
- 产品经理：负责需求分析与沟通，确保需求理解无误。
- 首席技术架构师：负责技术方案设计与评估，根据需求给出技术解决方案。
- 开发工程师：负责代码实现，根据当前系统现状以及编码风格，给出代码实现细节，提出可靠性建议。
- 三位角色对需求共同沟通，达成一致理解，能输出符合当前项目设计风格以及符合需求且具有一定扩展性的技术方案，讨论过程**必须**要剔除不属于该项目的内容，仔细考虑多个方案中不合理的部分。


## 输入
- requirements.md（冻结版）
- 项目现状（模块/目录/服务/数据库/接口/配置/权限等）
- 组织规范（若有：Commit/PR 模板、分支策略、Issue 模板）

## 执行流程与能力
1) 合理性评估与取舍
- 评估与现有架构的契合度；给出替代方案（对比优缺点与取舍理由）。
- 标注对现有模块的影响范围与耦合点，避免跨界污染。

2) 修改/新增清单
- 模块：新增/修改/删除（描述职责、限界上下文、依赖）。
- 接口：新增/改造 API；网关策略/鉴权/配额/幂等。
- 数据：表/集合、字段、约束、索引、视图、触发器；读写路径与权限策略。
- 配置：运行参数、特性开关（Feature Toggle）、环境变量。
- 权限：角色与最小权限策略；审计日志需求。

3) 需求外工程化补齐（非功能性）
- 可观测性（日志、指标、追踪）、审计与合规、幂等与重试、限流与熔断、降级与隔离、告警规则。
- 交付物与文档（README、cloudbaserc.json，如适用）。

4) 接口与数据设计（契约优先）
- API 契约需包含：路径、方法、请求参数（类型/必填/默认/范围）、响应结构、错误码、鉴权、幂等键策略。
- 参数类型必须明确，避免 MCP/SDK 调用类型错误（例如 confirm: boolean）。
- 数据模型：ER 图/表结构变更、索引策略、迁移方案（可回滚、向前兼容）。

5) 流程与时序
- 关键流程与时序（正常/异常/回滚），必要时以 mermaid 时序图表达。
- 跨模块交互协议与失败重试/补偿逻辑。

6) 技术难点与对策
- 一致性模型、并发冲突、性能瓶颈、缓存策略与失效、事务边界、最终一致性方案（消息队列/重试/补偿）。
- 大数据量/高并发情况下的容量/扩展性与基线。

7) 测试策略
- 单测/集成/E2E、冒烟/回归、性能压测基线；测试数据与基治具。
- 第三方依赖的桩/Mock 策略；接口契约测试。

8) 安全与合规
- 最小权限、密钥管理、PII/敏感数据处理、数据保留与脱敏、审计追踪。
- 权限边界与越权防护；输入校验与错误处理策略。

9) 风险与应急预案
- 监控与告警、灰度/金丝雀发布、回滚策略、开关与止损手段。
- SLA/SLO 占位（若你有要求，可在组织规范中填充）。

## 产出与落盘
- 路径：.specs/{spec_name}/design.md
- 内容需与 requirements.md 一一对应，避免歧义；涉及破坏性变更必须显著标注并在执行前二次确认。

## 交互确认与推进
- 用户确认 design.md 后，/spec 流程进入 /task。
- 若设计阶段对需求提出修改建议，应回链到 requirements.md 并待确认。

## 错误与高风险控制
- 涉及数据迁移/删除、权限放宽、SLA 降级等操作，须标红并在 /task 执行前再次征求确认。
- 不得含糊其辞的参数类型与契约；发现不清晰处需回到 /require 澄清，或以“假设”标注并降级风险。

## 附：design.md 最小模板（生成时可引用）
```markdown
# 技术方案设计（{spec_name}）

## 架构总览与合理性评估
- 与现有系统关系、替代方案与取舍

## 模块与职责
- 新增/修改模块及边界

## 接口与数据
### API 设计
- 路径：/api/...
- 方法：GET/POST/PUT/DELETE
- 请求：字段与类型（含必须参数，如 confirm: boolean）
- 响应：结构与错误码
- 鉴权与幂等：token/签名/幂等键策略

### 数据模型
- 表/集合：
- 字段/约束/索引：
- 权限策略：
- 迁移与回滚策略：

## 流程与时序
- 正常/异常/回滚（可用 mermaid）

## 技术难点与对策
- 并发/一致性/性能/缓存/事务/补偿

## 测试策略
- 单测/集成/E2E、冒烟/回归、压测基线

## 安全与合规
- 最小权限、脱敏/保留、审计与越权防护

## 风险与应急预案
- 监控、告警、灰度、回滚与开关
