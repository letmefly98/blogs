---
description: 
globs:
alwaysApply: true
---
---
description: Command /require - 需求分析与澄清（ERAS、歧义识别、缺失信息确认）
globs:
  alwaysApply: false
---

# 命令：/require（需求分析与澄清）

## 目标
- 将自然语言需求结构化为可验收的需求文档 requirements.md。
- 强化能力：ERAS（EARS）验收条款、歧义点识别、缺失信息清单与澄清交互（interactiveDialog 思维）。
- 明确范围（MoSCoW）与非目标，识别依赖与风险，输出可量化的验收口径。

## 前置
- 无强制前置。若已有上下文（模块/接口/数据/验收口径/业务边界），应作为输入参考。

## 输入
- 用户自然语言需求与上下文（可多轮追加）。
- 可选：现有系统信息（模块、目录、数据库、接口清单）、组织规范（Commit/PR 模板、分支策略、Issue 模板等）。

## 执行流程与能力
1) 场景识别与规则声明
- 识别项目场景：Web / 小程序 / 数据库 / UI / 后端（可多选）。

2) 需求结构化（ERAS/EARS）
- 采用 ERAS（EARS）语法逐条编写验收条款：
  - While <可选前置条件>, when <可选触发器>, the <系统名称> shall <系统响应>。
- 每条需求建议覆盖：正常流、边界条件、异常路径（至少 3–5 条）。

3) 歧义识别与缺失信息清单
- 识别并列出歧义点（角色、边界、并发、异常、术语、多系统对齐、权限、非功能性指标）。
- 形成澄清问题清单（Q1、Q2…），逐条向用户确认。缺失信息未确认前先以“占位假设”记录，并标注风险等级。

4) 范围界定与优先级
- 采用 MoSCoW：Must / Should / Could / Won’t。
- 标注 Non-Goals（明确本次不做）。

5) 依赖、风险与假设
- 外部系统、第三方接口、配额/限流、权限与合规、性能阈值、数据保密/审计。
- 对未确认项建立“假设清单”，在后续阶段若变更，要求 /task 记录到 modify.md。

6) 验收口径与成功度量
- 定义可量化 KPI 与验收方法（测试方式、观测指标、门限值）。

## 产出与落盘
- 路径：.specs/{spec_name}/requirements.md
- 文档结构建议：
  - 介绍（背景/目标）
  - 术语与角色
  - 需求列表（编号、用户故事、ERAS 验收条款、业务规则与限制、Non-Goals）
  - 歧义与待确认清单（Q1…）
  - 依赖与风险
  - 验收口径与成功度量（KPI）
  - 附录（上下文链接/参考）

## 交互确认与推进
- 本阶段完成后，须由用户确认 requirements.md。仅在确认后，/spec 流程才可进入 /design。

## 错误与高风险控制
- 高风险：将导致高成本变更的假设、跨系统耦合、权限与合规缺失。
- 处理：高风险项必须清晰标注；在 /design 中需提供替代方案与缓解策略；若在执行中调整，/task 必须记录到 modify.md。

## 附：requirements.md 最小模板（生成时可引用）
```markdown
# 需求文档（{spec_name}）

## 介绍
- 背景与目标
- 场景类型：Web/小程序/数据库/UI/后端（勾选）

## 术语与角色
- 术语：
- 角色：

## 需求列表
### R1 - （需求名称）
- 用户故事：
- ERAS 验收条款：
  1) While <前置条件可选>, when <触发器可选>, the <系统名称> shall <系统响应>
  2) ...
- 业务规则与限制：
- 非目标（Non-Goals）：

## 歧义与待确认清单
- Q1：问题描述（期望答案格式）
- Q2：...

## 依赖与风险
- 外部依赖：
- 风险与假设：

## 验收口径与成功度量
- KPI/量化标准：

## 附录
- 参考与上下文链接：
